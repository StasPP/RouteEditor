unit UROps;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, Spin, StdCtrls, ExtCtrls, TrackFunctions, Buttons, GeoString,
  LangLoader, MapEditor, BasicMapObjects;

type
  TFRops = class(TForm)
    MainBox: TComboBox;
    Label1: TLabel;
    PageControl1: TPageControl;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    TabSheet3: TTabSheet;
    Button1: TButton;
    Button2: TButton;
    PageControl2: TPageControl;
    TabSheet4: TTabSheet;
    Edit1: TEdit;
    Label2: TLabel;
    Label3: TLabel;
    SpinEdit2: TSpinEdit;
    TabSheet5: TTabSheet;
    TabSheet6: TTabSheet;
    Label6: TLabel;
    Edit2: TEdit;
    Label7: TLabel;
    SpinEdit1: TSpinEdit;
    Edit3: TEdit;
    Label8: TLabel;
    SpeedButton1: TSpeedButton;
    OpenDialog1: TOpenDialog;
    RouteBox2: TComboBox;
    Label10: TLabel;
    Label11: TLabel;
    SpinEdit3: TSpinEdit;
    CheckBox1: TCheckBox;
    RMethod: TComboBox;
    Label12: TLabel;
    GroupBox1: TGroupBox;
    Time1: TDateTimePicker;
    Date1: TDateTimePicker;
    Label4: TLabel;
    Label5: TLabel;
    Date2: TDateTimePicker;
    Time2: TDateTimePicker;
    doMinL: TCheckBox;
    isNoReset: TRadioButton;
    isReset: TRadioButton;
    MinL: TSpinEdit;
    CheckBox2: TCheckBox;
    CheckBox3: TCheckBox;
    CheckBox4: TCheckBox;
    CheckBox5: TCheckBox;
    CheckBox6: TCheckBox;
    CheckBox7: TCheckBox;
    Bevel1: TBevel;
    SpinEdit4: TSpinEdit;
    Label9: TLabel;
    TabSheet7: TTabSheet;
    RouteNLabel3: TLabel;
    RouteBox3: TComboBox;
    BrkStep: TSpinEdit;
    DoBrk: TCheckBox;
    isNoReset3: TRadioButton;
    isReset3: TRadioButton;
    IsoNormals: TCheckBox;
    SaveAsMarks: TCheckBox;
    NameEdit: TEdit;
    NameLabel: TCheckBox;
    SaveBorders: TCheckBox;
    procedure MainBoxChange(Sender: TObject);
    procedure Date1Change(Sender: TObject);
    procedure Date2Change(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure SpeedButton1Click(Sender: TObject);
    procedure TabSheet1Show(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure CheckBox5Click(Sender: TObject);
    procedure TabSheet7Show(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FRops: TFRops;
  MinDT,MaxDT :TDateTime;
implementation

uses MapperFm;

{$R *.dfm}

procedure TFRops.Button1Click(Sender: TObject);
var T1, T2   :TDateTime;
    R        :TRoute;
    I,
    I1, I2, DelI:Integer;

begin
  T1 := (trunc(Date1.Date) + (Time1.Time)-trunc(Time1.Time));
  T2 := (trunc(Date2.Date) + (Time2.Time)-trunc(Time2.Time));
  case MainBox.ItemIndex of
     0: begin
        AttachToRoute(MainTrack, T1, T2, RouteBox2.ItemIndex-1, 1, SpinEdit3.Value,
                      CheckBox1.Checked, CheckBox2.Checked);
     end;
     1:  case NameLabel.Checked of
             true:
                 MakeMNKRoute(MainTrack, T1, T2, RMethod.ItemIndex, MinL.Value,
                      DoMinL.Checked, isReset.Checked, NameEdit.Text);
             false:
                 MakeMNKRoute(MainTrack, T1, T2, RMethod.ItemIndex, MinL.Value,
                      DoMinL.Checked, isReset.Checked, '');

     end;
     2: begin
        Edit1.Text := FloatToStr(StrToFloat2(Edit1.Text));
        Edit2.Text := FloatToStr(StrToFloat2(Edit2.Text));

        if StrToFloat2(Edit1.Text)< 0.01 then
           Edit1.Text := '0.01';

        if StrToFloat2(Edit2.Text)< 0.01 then
           Edit2.Text := '0.01';

        case pagecontrol2.ActivePageIndex of

           0 :MakeStops(MainTrack, T1, T2, 1, StrToFloat2(Edit1.Text),
           SpinEdit1.Value, SpinEdit2.Value, CheckBox3.Checked);

           1 :MakeStops(MainTrack, T1, T2, 0, StrToFloat2(Edit2.Text),
           SpinEdit1.Value, SpinEdit2.Value, CheckBox4.Checked);

           2: MakeRINStops(MainTrack, T1, T2, CheckBox5.Checked,
                                  CheckBox7.Checked, CheckBox6.Checked, MapperFm.DrawAll,
                                  SpinEdit4.Value) ;
        end;
     end;
     3: begin
        {if (ParamStr(1)='-prgpx')or(ParamStr(1)='-prtxt') then
            MakeMNKRoute(MainTrack, T1, T2, RMethod.ItemIndex, MinL.Value,
                      DoMinL.Checked, isReset.Checked, NameEdit.Text); }

        if RouteCount = 0 then
           exit;

        DelI := RouteCount - 1;

        if RouteBox3.ItemIndex > 0 then
        begin
          I1 := RouteBox3.ItemIndex - 1;
          I2 := I1;
        end
         else
         begin
           I1 := 0;
           I2 := RouteCount-1;
         end;

        for I := I1 to I2 do
        begin
           if DoBrk.Checked then
             R := RouteStepBreak( I, BrkStep.Value)
             else
                R := Route[I];

           if isNoReset3.Checked then
              R.Name := R.Name + '_Track';

           if IsoNormals.Checked then
             R := RouteToTrack(R, MainTrack, 2, SaveBorders.Checked)
             else
               R := RouteToTrack(R, MainTrack, 1, SaveBorders.Checked);

          // inc(RouteCount);
           AddRoute(R.Name);
           Route[RouteCount-1] := R;
        end;

        RoutesToGeo;

        //if (ParamStr(1)='-prgpx')or(ParamStr(1)='-prtxt') then
        if MessageDlg(inf[97], mtconfirmation, [mbyes,mbno],0) = 6 then
        Begin
              for I := I1 To I2  do
              begin
               // Route[I] := RouteStepBreak( I, BrkStep.Value);
                Route[I] := RouteSpecialStepBreak( I, BrkStep.Value);

                RoutesToGeo;
               // MarksFromRoute(Route[I]);
              end;

        End;

        if SaveAsMarks.Checked then
        begin
          {for I := DeLI+1 To RouteCount-1  do
              MarksFromRoute(Route[I]);}
          MapFm.MrkRoutes.Click;
          if Length(Markers) > 0 then
             MapFm.SpeedButton10Click(nil);
        end;



        if isReset3.Checked then
          for I := DeLI DownTo 0  do
            DelRoute(I);

        RoutesToGeo;
        ReComputeRoutes(false);
     end;
  end;
  MapFm.SaveCtrlZ;
  close;
end;

procedure TFRops.Button2Click(Sender: TObject);
begin
  close;
end;

procedure TFRops.CheckBox5Click(Sender: TObject);
begin
  Label9.Visible := CheckBox5.Checked;
  SpinEdit4.Visible := CheckBox5.Checked;
end;

procedure TFRops.MainBoxChange(Sender: TObject);
begin
  PageControl1.ActivePageIndex := MainBox.ItemIndex;
end;

procedure TFRops.Date1Change(Sender: TObject);
begin
  if (trunc(Date1.Date) + (Time1.Time)-trunc(Time1.Time))<MinDT then
  begin
     FrOps.Date1.Date := trunc(MinDT);
     FrOps.Time1.Time := MinDT-trunc(MinDT);
  end;

  if (trunc(Date1.Date) + (Time1.Time)-trunc(Time1.Time))> MaxDT then
  begin
     FrOps.Date1.Date := trunc(MaxDT);
     FrOps.Time1.Time := MaxDT-trunc(MaxDT);
  end;
end;

procedure TFRops.Date2Change(Sender: TObject);
begin
  if (trunc(Date2.Date) + (Time2.Time)-trunc(Time2.Time)) < MinDT then
  begin
     FrOps.Date2.Date := trunc(MinDT);
     FrOps.Time2.Time := MinDT-trunc(MinDT);
  end;
  if (trunc(Date2.Date) + (Time2.Time)-trunc(Time2.Time)) > MaxDT then
  begin
     FrOps.Date2.Date := trunc(MaxDT);
     FrOps.Time2.Time := MaxDT-trunc(MaxDT);
  end;
end;

procedure TFRops.FormShow(Sender: TObject);
var I:Integer;
begin
  MinDt := MainTrack[0].T;
  MaxDT := MainTrack[Length(MainTrack)-1].T;

  MapFm.RefreshRouteBox;
  I :=  RouteBox2.ItemIndex;
  RouteBox2.Items := MapFm.RouteBox.Items;
  RouteBox2.ItemIndex := I;

  I :=  RouteBox3.ItemIndex;
  RouteBox3.Items := MapFm.RouteBox.Items;
  RouteBox3.ItemIndex := I;

  I :=  MainBox.ItemIndex;

  if (ParamStr(1)='-meangpx')or(ParamStr(1)='-meantxt') then
    I := 1;

  if (ParamStr(1)='-prgpx')or(ParamStr(1)='-prtxt') then
  begin
    SaveAsMarks.Checked := True;
    NameEdit.Text := 'MNK';
    I := 3;
  end;

  MainBox.Items[0] := Inf[88];
  MainBox.Items[1] := Inf[89];
  MainBox.Items[2] := Inf[90];
  MainBox.Items[3] := Inf[96];

  RMethod.Items[0] := Inf[99];
  RMethod.ItemIndex := 0;

  MainBox.ItemIndex :=  I;
// showmessage(Datetimetostr(maxdt));
end;

procedure TFRops.SpeedButton1Click(Sender: TObject);
begin
 if OpenDialog1.Execute then
 begin
    Edit3.Text := OpenDialog1.FileName;
    Label8.Caption := SearchRinEvents(OpenDialog1.FileName);
 end;
end;

procedure TFRops.TabSheet1Show(Sender: TObject);
var I:integer;
begin
 if RouteBox2.ItemIndex>-1 then
    I := RouteBox2.ItemIndex
      else I := 0;

 MapFm.RefreshRouteBox;
 RouteBox2.Items := MapFm.RouteBox.Items;

 RouteBox2.ItemIndex := I;
end;

procedure TFRops.TabSheet7Show(Sender: TObject);
var I: Integer;
begin
 if RouteBox3.ItemIndex > -1 then
    I := RouteBox3.ItemIndex
      else I := 0;

 MapFm.RefreshRouteBox;
 RouteBox3.Items := MapFm.RouteBox.Items;
 RouteBox3.ItemIndex := I;
end;

end.
